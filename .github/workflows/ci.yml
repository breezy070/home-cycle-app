name: CI & Deploy (Netlify + Render)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test-frontend:
    name: Frontend tests (client)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json
      - run: npm ci
      - run: npm run test

  test-backend:
    name: Backend tests (api)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    env:
      NODE_ENV: test
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - run: npm ci
      - run: npm run test

  deploy:
    name: Deploy (gate after tests)
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      # ---- Build client (Netlify) ----
      - name: Setup Node (for client build)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Install & build client
        working-directory: client
        run: |
          npm ci
          npm run build

      - name: Deploy to Netlify (Production)
        if: ${{ secrets.NETLIFY_AUTH_TOKEN && secrets.NETLIFY_SITE_ID }}
        uses: netlify/actions/cli@v2.0.0
        with:
          args: deploy --dir=client/dist --prod --site ${{ secrets.NETLIFY_SITE_ID }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      # ---- Render deploy hooks (Option A: simple triggers) ----
      # Mongo service first (optional; runs only if secret is set)
      - name: Trigger Render Mongo deploy
        if: ${{ secrets.RENDER_MONGO_DEPLOY_HOOK }}
        run: curl -fsSL -X POST "${{ secrets.RENDER_MONGO_DEPLOY_HOOK }}"

      # API service next (Docker)
      - name: Trigger Render API deploy
        if: ${{ secrets.RENDER_API_DEPLOY_HOOK }}
        run: curl -fsSL -X POST "${{ secrets.RENDER_API_DEPLOY_HOOK }}"
