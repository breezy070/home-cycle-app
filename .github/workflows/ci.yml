name: CI & Deploy (Netlify + Render)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test-frontend:
    name: Frontend tests (client)
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: client } }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json
      - run: npm ci
      - run: npm run test

  test-backend:
    name: Backend tests (api)
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: backend } }
    env:
      NODE_ENV: test
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - run: npm ci
      - run: npm run test

  deploy:
    name: Deploy (gate after tests)
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4

      # Figure out what changed
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            client:
              - 'client/**'
              - '.github/workflows/**'
            api:
              - 'backend/**'
              - '.github/workflows/**'
            mongo:
              - 'backend/mongo/**'
              - 'backend/Dockerfile.mongo'
              - '.github/workflows/**'

      # ---- Netlify (only if client changed) ----
      - name: Setup Node (for client build)
        if: ${{ steps.changes.outputs.client == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Install & build client
        if: ${{ steps.changes.outputs.client == 'true' }}
        working-directory: client
        run: |
          npm ci
          npm run build

      - name: Deploy to Netlify (Production)
        if: ${{ steps.changes.outputs.client == 'true' && secrets.NETLIFY_AUTH_TOKEN && secrets.NETLIFY_SITE_ID }}
        uses: netlify/actions/cli@v2.0.0
        with:
          args: deploy --dir=client/dist --prod --site ${{ secrets.NETLIFY_SITE_ID }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      # ---- Render deploy hooks (Option A) ----
      - name: Trigger Render Mongo deploy
        if: ${{ steps.changes.outputs.mongo == 'true' && secrets.RENDER_MONGO_DEPLOY_HOOK }}
        run: curl -fsSL -X POST "${{ secrets.RENDER_MONGO_DEPLOY_HOOK }}"

      - name: Trigger Render API deploy
        if: ${{ steps.changes.outputs.api == 'true' && secrets.RENDER_API_DEPLOY_HOOK }}
        run: curl -fsSL -X POST "${{ secrets.RENDER_API_DEPLOY_HOOK }}"

      - name: Wait for API health
        if: ${{ steps.changes.outputs.api == 'true' && secrets.API_HEALTH_URL }}
        env:
          URL: ${{ secrets.API_HEALTH_URL }}
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            echo "Health HTTP $code"
            if [ "$code" -ge 200 ] && [ "$code" -lt 400 ]; then exit 0; fi
            sleep 5
          done
          echo "API did not become healthy in time"; exit 1
